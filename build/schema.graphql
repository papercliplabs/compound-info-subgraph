type Protocol @entity {
    # only one of these
    id: ID!
    # address of price oracle the comptroller uses
    priceOracle: Bytes!
    # block number when the price oracle was last updated
    lastNewOracleBlockNumber: BigInt!

    # most recent block number where the protocol summary data was updated
    latestBlockNumber: BigInt!
    # all the markets that the comptroller controls
    markets: [Market!]! # this can't be a derived field as we need access to it in the historicalWeekData mapping
    # total supply of the entire protocol in USD
    totalSupplyUsd: BigDecimal!
    # total borrow of the entire protocol in USD
    totalBorrowUsd: BigDecimal!
    # total reserves of the entire protocol in USD
    totalReservesUsd: BigDecimal!
    # utilization of the entire protocol
    utilization: BigDecimal!

    # historical data in weekly intervals of the entire protocol
    historicalWeekData: [ProtocolWeekData!]! @derivedFrom(field: "protocol")
}

type Market @entity {
    # cToken address
    id: ID!
    # block number when the market was created
    creationBlockNumber: BigInt!
    # most recent block number where the market was updated
    latestBlockNumber: BigInt!
    # cToken symbol
    cTokenSymbol: String!
    # number of decimals of the cToken
    cTokenDecimals: BigInt!
    # underlying token name
    underlyingName: String!
    # underlying token symbol
    underlyingSymbol: String!
    # underlying token address
    underlyingAddress: Bytes!
    # number of decimals of the underlying token
    underlyingDecimals: BigInt!
    # comptroller address
    comptrollerAddress: Bytes!
    # collator factor in decimal form
    collateralFactor: BigDecimal!
    # reserve factor in decimal form
    reserveFactor: BigDecimal!
    # borrow cap in underlying tokens
    borrowCap: BigDecimal!
    # amount of underlying owned by the contract
    cash: BigDecimal!
    # price of underlying tokens in cTokens
    cTokenPerUnderlying: BigDecimal!
    # supply rate per block, this is the value from the contract with the 10^18 scaling removed
    supplyRatePerBlock: BigDecimal!
    # borrow rate per block, this is the value from the contract with the 10^18 scaling removed
    borrowRatePerBlock: BigDecimal!
    # supply apy not including the COMP distribution in decimal form
    supplyApy: BigDecimal!
    # borrow apy not including the COMP distribution in decimal form
    borrowApy: BigDecimal!
    # total supply apy including the COMP distribution in decimal form
    totalSupplyApy: BigDecimal!
    # total borrow apy including the COMP distribution in decimal form
    totalBorrowApy: BigDecimal!
    # total amount of underlying tokens supplied
    totalSupply: BigDecimal!
    # total amount supplied in USD
    totalSupplyUsd: BigDecimal!
    # total amount of underlying tokens borrowed
    totalBorrow: BigDecimal!
    # total amount borrowed in USD
    totalBorrowUsd: BigDecimal!
    # total amount of underlying token in reserves
    totalReserves: BigDecimal!
    # total amount in reserves in USD
    totalReservesUsd: BigDecimal!
    # total available to be borrowed in the underlying asset
    availableLiquidity: BigDecimal!
    # total available to be borrowed in USD
    availableLiquidityUsd: BigDecimal!
    # utilization
    utilization: BigDecimal!
    # COMP distribution per block for suppliers, this is the value from the contract with the 10^18 scaling removed
    compSpeedSupply: BigDecimal!
    # COMP distribution per block for borrowers, this is the value from the contract with the 10^18 scaling removed
    compSpeedBorrow: BigDecimal!
    # number of usdc one underlying token is worth
    usdcPerUnderlying: BigDecimal!
    # number of usdc one eth is worth
    usdcPerEth: BigDecimal!
    # price of COMP token in USDC
    usdcPerComp: BigDecimal!

    # historical data in hourly intervals
    historicalHourData: [MarketHourData!]! @derivedFrom(field: "market")
    # historical data in daily intervals
    historicalDayData: [MarketDayData!]! @derivedFrom(field: "market")
    # historical data in weekly intervals
    historicalWeekData: [MarketWeekData!]! @derivedFrom(field: "market")
}

type MarketHourData @entity {
    # token address concatendated with date
    id: ID!
    # market that this data belongs to
    market: Market!
    # unix timestamp in seconds rounded to the start of the hour
    date: BigInt!
    # supply apy not including the COMP distribution in decimal form
    supplyApy: BigDecimal!
    # borrow apy not including the COMP distribution in decimal form
    borrowApy: BigDecimal!
    # total supply apy including the COMP distribution in decimal form
    totalSupplyApy: BigDecimal!
    # total borrow apy including the COMP distribution in decimal form
    totalBorrowApy: BigDecimal!
    # total amount of underlying tokens supplied over time
    totalSupply: BigDecimal!
    # total amount supplied in USD
    totalSupplyUsd: BigDecimal!
    # total amount of underlying tokens borrowed over time
    totalBorrow: BigDecimal!
    # total amount borrowed in USD
    totalBorrowUsd: BigDecimal!
    # total amount of underlying token in reserves over time
    totalReserves: BigDecimal!
    # total amount in reseres in USD
    totalReservesUsd: BigDecimal!
    # utilization
    utilization: BigDecimal!
    # price of the underlying token in USDC
    usdcPerUnderlying: BigDecimal!
    # number of usdc one eth is worth
    usdcPerEth: BigDecimal!
    # price of COMP token in USDC
    usdcPerComp: BigDecimal!

    # number of transactions that went into deriving this data entry
    txCount: BigInt!
}

type MarketDayData @entity {
    # token address concatendated with date
    id: ID!
    # market that this data belongs to
    market: Market!
    # unix timestamp in seconds rounded to the start of the day
    date: BigInt!
    # supply apy not including the COMP distribution in decimal form
    supplyApy: BigDecimal!
    # borrow apy not including the COMP distribution in decimal form
    borrowApy: BigDecimal!
    # total supply apy including the COMP distribution in decimal form
    totalSupplyApy: BigDecimal!
    # total borrow apy including the COMP distribution in decimal form
    totalBorrowApy: BigDecimal!
    # total amount of underlying tokens supplied over time
    totalSupply: BigDecimal!
    # total amount supplied in USD
    totalSupplyUsd: BigDecimal!
    # total amount of underlying tokens borrowed over time
    totalBorrow: BigDecimal!
    # total amount borrowed in USD
    totalBorrowUsd: BigDecimal!
    # total amount of underlying token in reserves over time
    totalReserves: BigDecimal!
    # total amount in reseres in USD
    totalReservesUsd: BigDecimal!
    # utilization
    utilization: BigDecimal!
    # price of the underlying token in USDC
    usdcPerUnderlying: BigDecimal!
    # number of usdc one eth is worth
    usdcPerEth: BigDecimal!
    # price of COMP token in USDC
    usdcPerComp: BigDecimal!
    # number of transactions that went into deriving this data entry
    txCount: BigInt!
}

type MarketWeekData @entity {
    # token address concatendated with date
    id: ID!
    # market that this data belongs to
    market: Market!
    # unix timestamp in seconds rounded to the start of the week
    date: BigInt!
    # supply apy not including the COMP distribution in decimal form
    supplyApy: BigDecimal!
    # borrow apy not including the COMP distribution in decimal form
    borrowApy: BigDecimal!
    # total supply apy including the COMP distribution in decimal form
    totalSupplyApy: BigDecimal!
    # total borrow apy including the COMP distribution in decimal form
    totalBorrowApy: BigDecimal!
    # total amount of underlying tokens supplied over time
    totalSupply: BigDecimal!
    # total amount supplied in USD
    totalSupplyUsd: BigDecimal!
    # total amount of underlying tokens borrowed over time
    totalBorrow: BigDecimal!
    # total amount borrowed in USD
    totalBorrowUsd: BigDecimal!
    # total amount of underlying token in reserves over time
    totalReserves: BigDecimal!
    # total amount in reseres in USD
    totalReservesUsd: BigDecimal!
    # utilization
    utilization: BigDecimal!
    # price of the underlying token in USDC
    usdcPerUnderlying: BigDecimal!
    # number of usdc one eth is worth
    usdcPerEth: BigDecimal!
    # price of COMP token in USDC
    usdcPerComp: BigDecimal!
    # number of transactions that went into deriving this data entry
    txCount: BigInt!
}

type ProtocolWeekData @entity {
    # token address concatendated with date
    id: ID!
    # comptroller of the protocol
    protocol: Protocol!
    # unix timestamp in seconds rounded to the start of the week
    date: BigInt!
    # total amount of supplied in USD of the entire protocol
    totalSupplyUsd: BigDecimal!
    # total amount of borrowed in USD of the entire protocol
    totalBorrowUsd: BigDecimal!
    # total amount of reserves in USD of the entire protocol
    totalReservesUsd: BigDecimal!
    # utilization
    utilization: BigDecimal!
    # number of transactions that went into deriving this data entry
    txCount: BigInt!
}
