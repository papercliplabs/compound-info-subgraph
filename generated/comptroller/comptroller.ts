// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NewPendingImplementation extends ethereum.Event {
  get params(): NewPendingImplementation__Params {
    return new NewPendingImplementation__Params(this);
  }
}

export class NewPendingImplementation__Params {
  _event: NewPendingImplementation;

  constructor(event: NewPendingImplementation) {
    this._event = event;
  }

  get oldPendingImplementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newPendingImplementation(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewImplementation extends ethereum.Event {
  get params(): NewImplementation__Params {
    return new NewImplementation__Params(this);
  }
}

export class NewImplementation__Params {
  _event: NewImplementation;

  constructor(event: NewImplementation) {
    this._event = event;
  }

  get oldImplementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newImplementation(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewPendingAdmin extends ethereum.Event {
  get params(): NewPendingAdmin__Params {
    return new NewPendingAdmin__Params(this);
  }
}

export class NewPendingAdmin__Params {
  _event: NewPendingAdmin;

  constructor(event: NewPendingAdmin) {
    this._event = event;
  }

  get oldPendingAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newPendingAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewAdmin extends ethereum.Event {
  get params(): NewAdmin__Params {
    return new NewAdmin__Params(this);
  }
}

export class NewAdmin__Params {
  _event: NewAdmin;

  constructor(event: NewAdmin) {
    this._event = event;
  }

  get oldAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Failure extends ethereum.Event {
  get params(): Failure__Params {
    return new Failure__Params(this);
  }
}

export class Failure__Params {
  _event: Failure;

  constructor(event: Failure) {
    this._event = event;
  }

  get error(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get info(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get detail(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class MarketListed extends ethereum.Event {
  get params(): MarketListed__Params {
    return new MarketListed__Params(this);
  }
}

export class MarketListed__Params {
  _event: MarketListed;

  constructor(event: MarketListed) {
    this._event = event;
  }

  get cToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class MarketEntered extends ethereum.Event {
  get params(): MarketEntered__Params {
    return new MarketEntered__Params(this);
  }
}

export class MarketEntered__Params {
  _event: MarketEntered;

  constructor(event: MarketEntered) {
    this._event = event;
  }

  get cToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class MarketExited extends ethereum.Event {
  get params(): MarketExited__Params {
    return new MarketExited__Params(this);
  }
}

export class MarketExited__Params {
  _event: MarketExited;

  constructor(event: MarketExited) {
    this._event = event;
  }

  get cToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewCloseFactor extends ethereum.Event {
  get params(): NewCloseFactor__Params {
    return new NewCloseFactor__Params(this);
  }
}

export class NewCloseFactor__Params {
  _event: NewCloseFactor;

  constructor(event: NewCloseFactor) {
    this._event = event;
  }

  get oldCloseFactorMantissa(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newCloseFactorMantissa(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NewCollateralFactor extends ethereum.Event {
  get params(): NewCollateralFactor__Params {
    return new NewCollateralFactor__Params(this);
  }
}

export class NewCollateralFactor__Params {
  _event: NewCollateralFactor;

  constructor(event: NewCollateralFactor) {
    this._event = event;
  }

  get cToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get oldCollateralFactorMantissa(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newCollateralFactorMantissa(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NewLiquidationIncentive extends ethereum.Event {
  get params(): NewLiquidationIncentive__Params {
    return new NewLiquidationIncentive__Params(this);
  }
}

export class NewLiquidationIncentive__Params {
  _event: NewLiquidationIncentive;

  constructor(event: NewLiquidationIncentive) {
    this._event = event;
  }

  get oldLiquidationIncentiveMantissa(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newLiquidationIncentiveMantissa(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NewMaxAssets extends ethereum.Event {
  get params(): NewMaxAssets__Params {
    return new NewMaxAssets__Params(this);
  }
}

export class NewMaxAssets__Params {
  _event: NewMaxAssets;

  constructor(event: NewMaxAssets) {
    this._event = event;
  }

  get oldMaxAssets(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newMaxAssets(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NewPriceOracle extends ethereum.Event {
  get params(): NewPriceOracle__Params {
    return new NewPriceOracle__Params(this);
  }
}

export class NewPriceOracle__Params {
  _event: NewPriceOracle;

  constructor(event: NewPriceOracle) {
    this._event = event;
  }

  get oldPriceOracle(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newPriceOracle(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Failure1 extends ethereum.Event {
  get params(): Failure1__Params {
    return new Failure1__Params(this);
  }
}

export class Failure1__Params {
  _event: Failure1;

  constructor(event: Failure1) {
    this._event = event;
  }

  get error(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get info(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get detail(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class comptroller__getAccountLiquidityResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class comptroller__marketsResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class comptroller__liquidateCalculateSeizeTokensResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class comptroller extends ethereum.SmartContract {
  static bind(address: Address): comptroller {
    return new comptroller("comptroller", address);
  }

  pendingAdmin(): Address {
    let result = super.call("pendingAdmin", "pendingAdmin():(address)", []);

    return result[0].toAddress();
  }

  try_pendingAdmin(): ethereum.CallResult<Address> {
    let result = super.tryCall("pendingAdmin", "pendingAdmin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _setPendingAdmin(newPendingAdmin: Address): BigInt {
    let result = super.call(
      "_setPendingAdmin",
      "_setPendingAdmin(address):(uint256)",
      [ethereum.Value.fromAddress(newPendingAdmin)]
    );

    return result[0].toBigInt();
  }

  try__setPendingAdmin(newPendingAdmin: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_setPendingAdmin",
      "_setPendingAdmin(address):(uint256)",
      [ethereum.Value.fromAddress(newPendingAdmin)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  comptrollerImplementation(): Address {
    let result = super.call(
      "comptrollerImplementation",
      "comptrollerImplementation():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_comptrollerImplementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "comptrollerImplementation",
      "comptrollerImplementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _acceptImplementation(): BigInt {
    let result = super.call(
      "_acceptImplementation",
      "_acceptImplementation():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__acceptImplementation(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_acceptImplementation",
      "_acceptImplementation():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pendingComptrollerImplementation(): Address {
    let result = super.call(
      "pendingComptrollerImplementation",
      "pendingComptrollerImplementation():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_pendingComptrollerImplementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "pendingComptrollerImplementation",
      "pendingComptrollerImplementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _setPendingImplementation(newPendingImplementation: Address): BigInt {
    let result = super.call(
      "_setPendingImplementation",
      "_setPendingImplementation(address):(uint256)",
      [ethereum.Value.fromAddress(newPendingImplementation)]
    );

    return result[0].toBigInt();
  }

  try__setPendingImplementation(
    newPendingImplementation: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_setPendingImplementation",
      "_setPendingImplementation(address):(uint256)",
      [ethereum.Value.fromAddress(newPendingImplementation)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _acceptAdmin(): BigInt {
    let result = super.call("_acceptAdmin", "_acceptAdmin():(uint256)", []);

    return result[0].toBigInt();
  }

  try__acceptAdmin(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_acceptAdmin", "_acceptAdmin():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isComptroller(): boolean {
    let result = super.call("isComptroller", "isComptroller():(bool)", []);

    return result[0].toBoolean();
  }

  try_isComptroller(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isComptroller", "isComptroller():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  repayBorrowAllowed(
    cToken: Address,
    payer: Address,
    borrower: Address,
    repayAmount: BigInt
  ): BigInt {
    let result = super.call(
      "repayBorrowAllowed",
      "repayBorrowAllowed(address,address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cToken),
        ethereum.Value.fromAddress(payer),
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(repayAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_repayBorrowAllowed(
    cToken: Address,
    payer: Address,
    borrower: Address,
    repayAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "repayBorrowAllowed",
      "repayBorrowAllowed(address,address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cToken),
        ethereum.Value.fromAddress(payer),
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(repayAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pendingAdmin1(): Address {
    let result = super.call("pendingAdmin", "pendingAdmin():(address)", []);

    return result[0].toAddress();
  }

  try_pendingAdmin1(): ethereum.CallResult<Address> {
    let result = super.tryCall("pendingAdmin", "pendingAdmin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _setCloseFactor(newCloseFactorMantissa: BigInt): BigInt {
    let result = super.call(
      "_setCloseFactor",
      "_setCloseFactor(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(newCloseFactorMantissa)]
    );

    return result[0].toBigInt();
  }

  try__setCloseFactor(
    newCloseFactorMantissa: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_setCloseFactor",
      "_setCloseFactor(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(newCloseFactorMantissa)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidationIncentiveMantissa(): BigInt {
    let result = super.call(
      "liquidationIncentiveMantissa",
      "liquidationIncentiveMantissa():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_liquidationIncentiveMantissa(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidationIncentiveMantissa",
      "liquidationIncentiveMantissa():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mintAllowed(cToken: Address, minter: Address, mintAmount: BigInt): BigInt {
    let result = super.call(
      "mintAllowed",
      "mintAllowed(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cToken),
        ethereum.Value.fromAddress(minter),
        ethereum.Value.fromUnsignedBigInt(mintAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_mintAllowed(
    cToken: Address,
    minter: Address,
    mintAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mintAllowed",
      "mintAllowed(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cToken),
        ethereum.Value.fromAddress(minter),
        ethereum.Value.fromUnsignedBigInt(mintAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _setLiquidationIncentive(newLiquidationIncentiveMantissa: BigInt): BigInt {
    let result = super.call(
      "_setLiquidationIncentive",
      "_setLiquidationIncentive(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(newLiquidationIncentiveMantissa)]
    );

    return result[0].toBigInt();
  }

  try__setLiquidationIncentive(
    newLiquidationIncentiveMantissa: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_setLiquidationIncentive",
      "_setLiquidationIncentive(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(newLiquidationIncentiveMantissa)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _setPriceOracle(newOracle: Address): BigInt {
    let result = super.call(
      "_setPriceOracle",
      "_setPriceOracle(address):(uint256)",
      [ethereum.Value.fromAddress(newOracle)]
    );

    return result[0].toBigInt();
  }

  try__setPriceOracle(newOracle: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_setPriceOracle",
      "_setPriceOracle(address):(uint256)",
      [ethereum.Value.fromAddress(newOracle)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAccountLiquidity(
    account: Address
  ): comptroller__getAccountLiquidityResult {
    let result = super.call(
      "getAccountLiquidity",
      "getAccountLiquidity(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return new comptroller__getAccountLiquidityResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getAccountLiquidity(
    account: Address
  ): ethereum.CallResult<comptroller__getAccountLiquidityResult> {
    let result = super.tryCall(
      "getAccountLiquidity",
      "getAccountLiquidity(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new comptroller__getAccountLiquidityResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  liquidateBorrowAllowed(
    cTokenBorrowed: Address,
    cTokenCollateral: Address,
    liquidator: Address,
    borrower: Address,
    repayAmount: BigInt
  ): BigInt {
    let result = super.call(
      "liquidateBorrowAllowed",
      "liquidateBorrowAllowed(address,address,address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cTokenBorrowed),
        ethereum.Value.fromAddress(cTokenCollateral),
        ethereum.Value.fromAddress(liquidator),
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(repayAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_liquidateBorrowAllowed(
    cTokenBorrowed: Address,
    cTokenCollateral: Address,
    liquidator: Address,
    borrower: Address,
    repayAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidateBorrowAllowed",
      "liquidateBorrowAllowed(address,address,address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cTokenBorrowed),
        ethereum.Value.fromAddress(cTokenCollateral),
        ethereum.Value.fromAddress(liquidator),
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(repayAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  oracle(): Address {
    let result = super.call("oracle", "oracle():(address)", []);

    return result[0].toAddress();
  }

  try_oracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("oracle", "oracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  markets(param0: Address): comptroller__marketsResult {
    let result = super.call("markets", "markets(address):(bool,uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return new comptroller__marketsResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_markets(
    param0: Address
  ): ethereum.CallResult<comptroller__marketsResult> {
    let result = super.tryCall("markets", "markets(address):(bool,uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new comptroller__marketsResult(value[0].toBoolean(), value[1].toBigInt())
    );
  }

  checkMembership(account: Address, cToken: Address): boolean {
    let result = super.call(
      "checkMembership",
      "checkMembership(address,address):(bool)",
      [ethereum.Value.fromAddress(account), ethereum.Value.fromAddress(cToken)]
    );

    return result[0].toBoolean();
  }

  try_checkMembership(
    account: Address,
    cToken: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkMembership",
      "checkMembership(address,address):(bool)",
      [ethereum.Value.fromAddress(account), ethereum.Value.fromAddress(cToken)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxAssets(): BigInt {
    let result = super.call("maxAssets", "maxAssets():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxAssets(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxAssets", "maxAssets():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _supportMarket(cToken: Address): BigInt {
    let result = super.call(
      "_supportMarket",
      "_supportMarket(address):(uint256)",
      [ethereum.Value.fromAddress(cToken)]
    );

    return result[0].toBigInt();
  }

  try__supportMarket(cToken: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_supportMarket",
      "_supportMarket(address):(uint256)",
      [ethereum.Value.fromAddress(cToken)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAssetsIn(account: Address): Array<Address> {
    let result = super.call("getAssetsIn", "getAssetsIn(address):(address[])", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toAddressArray();
  }

  try_getAssetsIn(account: Address): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getAssetsIn",
      "getAssetsIn(address):(address[])",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  comptrollerImplementation1(): Address {
    let result = super.call(
      "comptrollerImplementation",
      "comptrollerImplementation():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_comptrollerImplementation1(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "comptrollerImplementation",
      "comptrollerImplementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  transferAllowed(
    cToken: Address,
    src: Address,
    dst: Address,
    transferTokens: BigInt
  ): BigInt {
    let result = super.call(
      "transferAllowed",
      "transferAllowed(address,address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cToken),
        ethereum.Value.fromAddress(src),
        ethereum.Value.fromAddress(dst),
        ethereum.Value.fromUnsignedBigInt(transferTokens)
      ]
    );

    return result[0].toBigInt();
  }

  try_transferAllowed(
    cToken: Address,
    src: Address,
    dst: Address,
    transferTokens: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "transferAllowed",
      "transferAllowed(address,address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cToken),
        ethereum.Value.fromAddress(src),
        ethereum.Value.fromAddress(dst),
        ethereum.Value.fromUnsignedBigInt(transferTokens)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  enterMarkets(cTokens: Array<Address>): Array<BigInt> {
    let result = super.call(
      "enterMarkets",
      "enterMarkets(address[]):(uint256[])",
      [ethereum.Value.fromAddressArray(cTokens)]
    );

    return result[0].toBigIntArray();
  }

  try_enterMarkets(
    cTokens: Array<Address>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "enterMarkets",
      "enterMarkets(address[]):(uint256[])",
      [ethereum.Value.fromAddressArray(cTokens)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  liquidateCalculateSeizeTokens(
    cTokenBorrowed: Address,
    cTokenCollateral: Address,
    repayAmount: BigInt
  ): comptroller__liquidateCalculateSeizeTokensResult {
    let result = super.call(
      "liquidateCalculateSeizeTokens",
      "liquidateCalculateSeizeTokens(address,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(cTokenBorrowed),
        ethereum.Value.fromAddress(cTokenCollateral),
        ethereum.Value.fromUnsignedBigInt(repayAmount)
      ]
    );

    return new comptroller__liquidateCalculateSeizeTokensResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_liquidateCalculateSeizeTokens(
    cTokenBorrowed: Address,
    cTokenCollateral: Address,
    repayAmount: BigInt
  ): ethereum.CallResult<comptroller__liquidateCalculateSeizeTokensResult> {
    let result = super.tryCall(
      "liquidateCalculateSeizeTokens",
      "liquidateCalculateSeizeTokens(address,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(cTokenBorrowed),
        ethereum.Value.fromAddress(cTokenCollateral),
        ethereum.Value.fromUnsignedBigInt(repayAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new comptroller__liquidateCalculateSeizeTokensResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  seizeAllowed(
    cTokenCollateral: Address,
    cTokenBorrowed: Address,
    liquidator: Address,
    borrower: Address,
    seizeTokens: BigInt
  ): BigInt {
    let result = super.call(
      "seizeAllowed",
      "seizeAllowed(address,address,address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cTokenCollateral),
        ethereum.Value.fromAddress(cTokenBorrowed),
        ethereum.Value.fromAddress(liquidator),
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(seizeTokens)
      ]
    );

    return result[0].toBigInt();
  }

  try_seizeAllowed(
    cTokenCollateral: Address,
    cTokenBorrowed: Address,
    liquidator: Address,
    borrower: Address,
    seizeTokens: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "seizeAllowed",
      "seizeAllowed(address,address,address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cTokenCollateral),
        ethereum.Value.fromAddress(cTokenBorrowed),
        ethereum.Value.fromAddress(liquidator),
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(seizeTokens)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _setMaxAssets(newMaxAssets: BigInt): BigInt {
    let result = super.call(
      "_setMaxAssets",
      "_setMaxAssets(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(newMaxAssets)]
    );

    return result[0].toBigInt();
  }

  try__setMaxAssets(newMaxAssets: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_setMaxAssets",
      "_setMaxAssets(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(newMaxAssets)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrowAllowed(
    cToken: Address,
    borrower: Address,
    borrowAmount: BigInt
  ): BigInt {
    let result = super.call(
      "borrowAllowed",
      "borrowAllowed(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cToken),
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(borrowAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_borrowAllowed(
    cToken: Address,
    borrower: Address,
    borrowAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "borrowAllowed",
      "borrowAllowed(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cToken),
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(borrowAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  accountAssets(param0: Address, param1: BigInt): Address {
    let result = super.call(
      "accountAssets",
      "accountAssets(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toAddress();
  }

  try_accountAssets(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "accountAssets",
      "accountAssets(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingComptrollerImplementation1(): Address {
    let result = super.call(
      "pendingComptrollerImplementation",
      "pendingComptrollerImplementation():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_pendingComptrollerImplementation1(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "pendingComptrollerImplementation",
      "pendingComptrollerImplementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _setCollateralFactor(
    cToken: Address,
    newCollateralFactorMantissa: BigInt
  ): BigInt {
    let result = super.call(
      "_setCollateralFactor",
      "_setCollateralFactor(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cToken),
        ethereum.Value.fromUnsignedBigInt(newCollateralFactorMantissa)
      ]
    );

    return result[0].toBigInt();
  }

  try__setCollateralFactor(
    cToken: Address,
    newCollateralFactorMantissa: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_setCollateralFactor",
      "_setCollateralFactor(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cToken),
        ethereum.Value.fromUnsignedBigInt(newCollateralFactorMantissa)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  closeFactorMantissa(): BigInt {
    let result = super.call(
      "closeFactorMantissa",
      "closeFactorMantissa():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_closeFactorMantissa(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "closeFactorMantissa",
      "closeFactorMantissa():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeemAllowed(
    cToken: Address,
    redeemer: Address,
    redeemTokens: BigInt
  ): BigInt {
    let result = super.call(
      "redeemAllowed",
      "redeemAllowed(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cToken),
        ethereum.Value.fromAddress(redeemer),
        ethereum.Value.fromUnsignedBigInt(redeemTokens)
      ]
    );

    return result[0].toBigInt();
  }

  try_redeemAllowed(
    cToken: Address,
    redeemer: Address,
    redeemTokens: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redeemAllowed",
      "redeemAllowed(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cToken),
        ethereum.Value.fromAddress(redeemer),
        ethereum.Value.fromUnsignedBigInt(redeemTokens)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  exitMarket(cTokenAddress: Address): BigInt {
    let result = super.call("exitMarket", "exitMarket(address):(uint256)", [
      ethereum.Value.fromAddress(cTokenAddress)
    ]);

    return result[0].toBigInt();
  }

  try_exitMarket(cTokenAddress: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("exitMarket", "exitMarket(address):(uint256)", [
      ethereum.Value.fromAddress(cTokenAddress)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  admin1(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin1(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class _setPendingAdminCall extends ethereum.Call {
  get inputs(): _setPendingAdminCall__Inputs {
    return new _setPendingAdminCall__Inputs(this);
  }

  get outputs(): _setPendingAdminCall__Outputs {
    return new _setPendingAdminCall__Outputs(this);
  }
}

export class _setPendingAdminCall__Inputs {
  _call: _setPendingAdminCall;

  constructor(call: _setPendingAdminCall) {
    this._call = call;
  }

  get newPendingAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class _setPendingAdminCall__Outputs {
  _call: _setPendingAdminCall;

  constructor(call: _setPendingAdminCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class _acceptImplementationCall extends ethereum.Call {
  get inputs(): _acceptImplementationCall__Inputs {
    return new _acceptImplementationCall__Inputs(this);
  }

  get outputs(): _acceptImplementationCall__Outputs {
    return new _acceptImplementationCall__Outputs(this);
  }
}

export class _acceptImplementationCall__Inputs {
  _call: _acceptImplementationCall;

  constructor(call: _acceptImplementationCall) {
    this._call = call;
  }
}

export class _acceptImplementationCall__Outputs {
  _call: _acceptImplementationCall;

  constructor(call: _acceptImplementationCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class _setPendingImplementationCall extends ethereum.Call {
  get inputs(): _setPendingImplementationCall__Inputs {
    return new _setPendingImplementationCall__Inputs(this);
  }

  get outputs(): _setPendingImplementationCall__Outputs {
    return new _setPendingImplementationCall__Outputs(this);
  }
}

export class _setPendingImplementationCall__Inputs {
  _call: _setPendingImplementationCall;

  constructor(call: _setPendingImplementationCall) {
    this._call = call;
  }

  get newPendingImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class _setPendingImplementationCall__Outputs {
  _call: _setPendingImplementationCall;

  constructor(call: _setPendingImplementationCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class _acceptAdminCall extends ethereum.Call {
  get inputs(): _acceptAdminCall__Inputs {
    return new _acceptAdminCall__Inputs(this);
  }

  get outputs(): _acceptAdminCall__Outputs {
    return new _acceptAdminCall__Outputs(this);
  }
}

export class _acceptAdminCall__Inputs {
  _call: _acceptAdminCall;

  constructor(call: _acceptAdminCall) {
    this._call = call;
  }
}

export class _acceptAdminCall__Outputs {
  _call: _acceptAdminCall;

  constructor(call: _acceptAdminCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class RepayBorrowVerifyCall extends ethereum.Call {
  get inputs(): RepayBorrowVerifyCall__Inputs {
    return new RepayBorrowVerifyCall__Inputs(this);
  }

  get outputs(): RepayBorrowVerifyCall__Outputs {
    return new RepayBorrowVerifyCall__Outputs(this);
  }
}

export class RepayBorrowVerifyCall__Inputs {
  _call: RepayBorrowVerifyCall;

  constructor(call: RepayBorrowVerifyCall) {
    this._call = call;
  }

  get cToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get payer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get borrower(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get repayAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get borrowerIndex(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class RepayBorrowVerifyCall__Outputs {
  _call: RepayBorrowVerifyCall;

  constructor(call: RepayBorrowVerifyCall) {
    this._call = call;
  }
}

export class RepayBorrowAllowedCall extends ethereum.Call {
  get inputs(): RepayBorrowAllowedCall__Inputs {
    return new RepayBorrowAllowedCall__Inputs(this);
  }

  get outputs(): RepayBorrowAllowedCall__Outputs {
    return new RepayBorrowAllowedCall__Outputs(this);
  }
}

export class RepayBorrowAllowedCall__Inputs {
  _call: RepayBorrowAllowedCall;

  constructor(call: RepayBorrowAllowedCall) {
    this._call = call;
  }

  get cToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get payer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get borrower(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get repayAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class RepayBorrowAllowedCall__Outputs {
  _call: RepayBorrowAllowedCall;

  constructor(call: RepayBorrowAllowedCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class _setCloseFactorCall extends ethereum.Call {
  get inputs(): _setCloseFactorCall__Inputs {
    return new _setCloseFactorCall__Inputs(this);
  }

  get outputs(): _setCloseFactorCall__Outputs {
    return new _setCloseFactorCall__Outputs(this);
  }
}

export class _setCloseFactorCall__Inputs {
  _call: _setCloseFactorCall;

  constructor(call: _setCloseFactorCall) {
    this._call = call;
  }

  get newCloseFactorMantissa(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class _setCloseFactorCall__Outputs {
  _call: _setCloseFactorCall;

  constructor(call: _setCloseFactorCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class _becomeCall extends ethereum.Call {
  get inputs(): _becomeCall__Inputs {
    return new _becomeCall__Inputs(this);
  }

  get outputs(): _becomeCall__Outputs {
    return new _becomeCall__Outputs(this);
  }
}

export class _becomeCall__Inputs {
  _call: _becomeCall;

  constructor(call: _becomeCall) {
    this._call = call;
  }

  get unitroller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _oracle(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _closeFactorMantissa(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _maxAssets(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get reinitializing(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }
}

export class _becomeCall__Outputs {
  _call: _becomeCall;

  constructor(call: _becomeCall) {
    this._call = call;
  }
}

export class MintVerifyCall extends ethereum.Call {
  get inputs(): MintVerifyCall__Inputs {
    return new MintVerifyCall__Inputs(this);
  }

  get outputs(): MintVerifyCall__Outputs {
    return new MintVerifyCall__Outputs(this);
  }
}

export class MintVerifyCall__Inputs {
  _call: MintVerifyCall;

  constructor(call: MintVerifyCall) {
    this._call = call;
  }

  get cToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get minter(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get mintAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get mintTokens(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class MintVerifyCall__Outputs {
  _call: MintVerifyCall;

  constructor(call: MintVerifyCall) {
    this._call = call;
  }
}

export class LiquidateBorrowVerifyCall extends ethereum.Call {
  get inputs(): LiquidateBorrowVerifyCall__Inputs {
    return new LiquidateBorrowVerifyCall__Inputs(this);
  }

  get outputs(): LiquidateBorrowVerifyCall__Outputs {
    return new LiquidateBorrowVerifyCall__Outputs(this);
  }
}

export class LiquidateBorrowVerifyCall__Inputs {
  _call: LiquidateBorrowVerifyCall;

  constructor(call: LiquidateBorrowVerifyCall) {
    this._call = call;
  }

  get cTokenBorrowed(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get cTokenCollateral(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get liquidator(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get borrower(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get repayAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get seizeTokens(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class LiquidateBorrowVerifyCall__Outputs {
  _call: LiquidateBorrowVerifyCall;

  constructor(call: LiquidateBorrowVerifyCall) {
    this._call = call;
  }
}

export class MintAllowedCall extends ethereum.Call {
  get inputs(): MintAllowedCall__Inputs {
    return new MintAllowedCall__Inputs(this);
  }

  get outputs(): MintAllowedCall__Outputs {
    return new MintAllowedCall__Outputs(this);
  }
}

export class MintAllowedCall__Inputs {
  _call: MintAllowedCall;

  constructor(call: MintAllowedCall) {
    this._call = call;
  }

  get cToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get minter(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get mintAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class MintAllowedCall__Outputs {
  _call: MintAllowedCall;

  constructor(call: MintAllowedCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class _setLiquidationIncentiveCall extends ethereum.Call {
  get inputs(): _setLiquidationIncentiveCall__Inputs {
    return new _setLiquidationIncentiveCall__Inputs(this);
  }

  get outputs(): _setLiquidationIncentiveCall__Outputs {
    return new _setLiquidationIncentiveCall__Outputs(this);
  }
}

export class _setLiquidationIncentiveCall__Inputs {
  _call: _setLiquidationIncentiveCall;

  constructor(call: _setLiquidationIncentiveCall) {
    this._call = call;
  }

  get newLiquidationIncentiveMantissa(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class _setLiquidationIncentiveCall__Outputs {
  _call: _setLiquidationIncentiveCall;

  constructor(call: _setLiquidationIncentiveCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemVerifyCall extends ethereum.Call {
  get inputs(): RedeemVerifyCall__Inputs {
    return new RedeemVerifyCall__Inputs(this);
  }

  get outputs(): RedeemVerifyCall__Outputs {
    return new RedeemVerifyCall__Outputs(this);
  }
}

export class RedeemVerifyCall__Inputs {
  _call: RedeemVerifyCall;

  constructor(call: RedeemVerifyCall) {
    this._call = call;
  }

  get cToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get redeemer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get redeemAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get redeemTokens(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class RedeemVerifyCall__Outputs {
  _call: RedeemVerifyCall;

  constructor(call: RedeemVerifyCall) {
    this._call = call;
  }
}

export class _setPriceOracleCall extends ethereum.Call {
  get inputs(): _setPriceOracleCall__Inputs {
    return new _setPriceOracleCall__Inputs(this);
  }

  get outputs(): _setPriceOracleCall__Outputs {
    return new _setPriceOracleCall__Outputs(this);
  }
}

export class _setPriceOracleCall__Inputs {
  _call: _setPriceOracleCall;

  constructor(call: _setPriceOracleCall) {
    this._call = call;
  }

  get newOracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class _setPriceOracleCall__Outputs {
  _call: _setPriceOracleCall;

  constructor(call: _setPriceOracleCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BorrowVerifyCall extends ethereum.Call {
  get inputs(): BorrowVerifyCall__Inputs {
    return new BorrowVerifyCall__Inputs(this);
  }

  get outputs(): BorrowVerifyCall__Outputs {
    return new BorrowVerifyCall__Outputs(this);
  }
}

export class BorrowVerifyCall__Inputs {
  _call: BorrowVerifyCall;

  constructor(call: BorrowVerifyCall) {
    this._call = call;
  }

  get cToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get borrower(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get borrowAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BorrowVerifyCall__Outputs {
  _call: BorrowVerifyCall;

  constructor(call: BorrowVerifyCall) {
    this._call = call;
  }
}

export class LiquidateBorrowAllowedCall extends ethereum.Call {
  get inputs(): LiquidateBorrowAllowedCall__Inputs {
    return new LiquidateBorrowAllowedCall__Inputs(this);
  }

  get outputs(): LiquidateBorrowAllowedCall__Outputs {
    return new LiquidateBorrowAllowedCall__Outputs(this);
  }
}

export class LiquidateBorrowAllowedCall__Inputs {
  _call: LiquidateBorrowAllowedCall;

  constructor(call: LiquidateBorrowAllowedCall) {
    this._call = call;
  }

  get cTokenBorrowed(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get cTokenCollateral(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get liquidator(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get borrower(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get repayAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class LiquidateBorrowAllowedCall__Outputs {
  _call: LiquidateBorrowAllowedCall;

  constructor(call: LiquidateBorrowAllowedCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferVerifyCall extends ethereum.Call {
  get inputs(): TransferVerifyCall__Inputs {
    return new TransferVerifyCall__Inputs(this);
  }

  get outputs(): TransferVerifyCall__Outputs {
    return new TransferVerifyCall__Outputs(this);
  }
}

export class TransferVerifyCall__Inputs {
  _call: TransferVerifyCall;

  constructor(call: TransferVerifyCall) {
    this._call = call;
  }

  get cToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get src(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get dst(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get transferTokens(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class TransferVerifyCall__Outputs {
  _call: TransferVerifyCall;

  constructor(call: TransferVerifyCall) {
    this._call = call;
  }
}

export class SeizeVerifyCall extends ethereum.Call {
  get inputs(): SeizeVerifyCall__Inputs {
    return new SeizeVerifyCall__Inputs(this);
  }

  get outputs(): SeizeVerifyCall__Outputs {
    return new SeizeVerifyCall__Outputs(this);
  }
}

export class SeizeVerifyCall__Inputs {
  _call: SeizeVerifyCall;

  constructor(call: SeizeVerifyCall) {
    this._call = call;
  }

  get cTokenCollateral(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get cTokenBorrowed(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get liquidator(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get borrower(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get seizeTokens(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SeizeVerifyCall__Outputs {
  _call: SeizeVerifyCall;

  constructor(call: SeizeVerifyCall) {
    this._call = call;
  }
}

export class _supportMarketCall extends ethereum.Call {
  get inputs(): _supportMarketCall__Inputs {
    return new _supportMarketCall__Inputs(this);
  }

  get outputs(): _supportMarketCall__Outputs {
    return new _supportMarketCall__Outputs(this);
  }
}

export class _supportMarketCall__Inputs {
  _call: _supportMarketCall;

  constructor(call: _supportMarketCall) {
    this._call = call;
  }

  get cToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class _supportMarketCall__Outputs {
  _call: _supportMarketCall;

  constructor(call: _supportMarketCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferAllowedCall extends ethereum.Call {
  get inputs(): TransferAllowedCall__Inputs {
    return new TransferAllowedCall__Inputs(this);
  }

  get outputs(): TransferAllowedCall__Outputs {
    return new TransferAllowedCall__Outputs(this);
  }
}

export class TransferAllowedCall__Inputs {
  _call: TransferAllowedCall;

  constructor(call: TransferAllowedCall) {
    this._call = call;
  }

  get cToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get src(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get dst(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get transferTokens(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class TransferAllowedCall__Outputs {
  _call: TransferAllowedCall;

  constructor(call: TransferAllowedCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class EnterMarketsCall extends ethereum.Call {
  get inputs(): EnterMarketsCall__Inputs {
    return new EnterMarketsCall__Inputs(this);
  }

  get outputs(): EnterMarketsCall__Outputs {
    return new EnterMarketsCall__Outputs(this);
  }
}

export class EnterMarketsCall__Inputs {
  _call: EnterMarketsCall;

  constructor(call: EnterMarketsCall) {
    this._call = call;
  }

  get cTokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class EnterMarketsCall__Outputs {
  _call: EnterMarketsCall;

  constructor(call: EnterMarketsCall) {
    this._call = call;
  }

  get value0(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class SeizeAllowedCall extends ethereum.Call {
  get inputs(): SeizeAllowedCall__Inputs {
    return new SeizeAllowedCall__Inputs(this);
  }

  get outputs(): SeizeAllowedCall__Outputs {
    return new SeizeAllowedCall__Outputs(this);
  }
}

export class SeizeAllowedCall__Inputs {
  _call: SeizeAllowedCall;

  constructor(call: SeizeAllowedCall) {
    this._call = call;
  }

  get cTokenCollateral(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get cTokenBorrowed(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get liquidator(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get borrower(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get seizeTokens(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SeizeAllowedCall__Outputs {
  _call: SeizeAllowedCall;

  constructor(call: SeizeAllowedCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class _setMaxAssetsCall extends ethereum.Call {
  get inputs(): _setMaxAssetsCall__Inputs {
    return new _setMaxAssetsCall__Inputs(this);
  }

  get outputs(): _setMaxAssetsCall__Outputs {
    return new _setMaxAssetsCall__Outputs(this);
  }
}

export class _setMaxAssetsCall__Inputs {
  _call: _setMaxAssetsCall;

  constructor(call: _setMaxAssetsCall) {
    this._call = call;
  }

  get newMaxAssets(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class _setMaxAssetsCall__Outputs {
  _call: _setMaxAssetsCall;

  constructor(call: _setMaxAssetsCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BorrowAllowedCall extends ethereum.Call {
  get inputs(): BorrowAllowedCall__Inputs {
    return new BorrowAllowedCall__Inputs(this);
  }

  get outputs(): BorrowAllowedCall__Outputs {
    return new BorrowAllowedCall__Outputs(this);
  }
}

export class BorrowAllowedCall__Inputs {
  _call: BorrowAllowedCall;

  constructor(call: BorrowAllowedCall) {
    this._call = call;
  }

  get cToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get borrower(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get borrowAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BorrowAllowedCall__Outputs {
  _call: BorrowAllowedCall;

  constructor(call: BorrowAllowedCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class _setCollateralFactorCall extends ethereum.Call {
  get inputs(): _setCollateralFactorCall__Inputs {
    return new _setCollateralFactorCall__Inputs(this);
  }

  get outputs(): _setCollateralFactorCall__Outputs {
    return new _setCollateralFactorCall__Outputs(this);
  }
}

export class _setCollateralFactorCall__Inputs {
  _call: _setCollateralFactorCall;

  constructor(call: _setCollateralFactorCall) {
    this._call = call;
  }

  get cToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newCollateralFactorMantissa(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class _setCollateralFactorCall__Outputs {
  _call: _setCollateralFactorCall;

  constructor(call: _setCollateralFactorCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemAllowedCall extends ethereum.Call {
  get inputs(): RedeemAllowedCall__Inputs {
    return new RedeemAllowedCall__Inputs(this);
  }

  get outputs(): RedeemAllowedCall__Outputs {
    return new RedeemAllowedCall__Outputs(this);
  }
}

export class RedeemAllowedCall__Inputs {
  _call: RedeemAllowedCall;

  constructor(call: RedeemAllowedCall) {
    this._call = call;
  }

  get cToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get redeemer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get redeemTokens(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RedeemAllowedCall__Outputs {
  _call: RedeemAllowedCall;

  constructor(call: RedeemAllowedCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ExitMarketCall extends ethereum.Call {
  get inputs(): ExitMarketCall__Inputs {
    return new ExitMarketCall__Inputs(this);
  }

  get outputs(): ExitMarketCall__Outputs {
    return new ExitMarketCall__Outputs(this);
  }
}

export class ExitMarketCall__Inputs {
  _call: ExitMarketCall;

  constructor(call: ExitMarketCall) {
    this._call = call;
  }

  get cTokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ExitMarketCall__Outputs {
  _call: ExitMarketCall;

  constructor(call: ExitMarketCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class Constructor1Call extends ethereum.Call {
  get inputs(): Constructor1Call__Inputs {
    return new Constructor1Call__Inputs(this);
  }

  get outputs(): Constructor1Call__Outputs {
    return new Constructor1Call__Outputs(this);
  }
}

export class Constructor1Call__Inputs {
  _call: Constructor1Call;

  constructor(call: Constructor1Call) {
    this._call = call;
  }
}

export class Constructor1Call__Outputs {
  _call: Constructor1Call;

  constructor(call: Constructor1Call) {
    this._call = call;
  }
}
